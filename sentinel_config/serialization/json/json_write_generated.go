package json

// Autogenerated using generate_sentinel_ast_walker.js
// DO NOT MODIFY MANUALLY
//
// This is not most effecient or quickest way to serialize to JSON, but it works!

import (
	"fmt"
	"io"

	"github.com/glennsarti/sentinel-parser/sentinel_config/ast"
)

func (jc *jsonCoder) write(node ast.Node, writer io.Writer) error {
	if node == nil {
		return fmt.Errorf("received nil while serializing")
	}

	switch n := node.(type) {
	case *ast.Feature:
		return jc.writeFeature(n, writer)
	case *ast.File:
		return jc.writeFile(n, writer)
	case *ast.Global:
		return jc.writeGlobal(n, writer)
	case *ast.Mock:
		return jc.writeMock(n, writer)
	case *ast.MockModule:
		return jc.writeMockModule(n, writer)
	case *ast.Parameter:
		return jc.writeParameter(n, writer)
	case *ast.Policy:
		return jc.writePolicy(n, writer)
	case *ast.SentinelOptions:
		return jc.writeSentinelOptions(n, writer)
	case *ast.Test:
		return jc.writeTest(n, writer)
	case *ast.TestRule:
		return jc.writeTestRule(n, writer)
	case *ast.V1ModuleImport:
		return jc.writeV1ModuleImport(n, writer)
	case *ast.V1PluginImport:
		return jc.writeV1PluginImport(n, writer)
	case *ast.V2ModuleImport:
		return jc.writeV2ModuleImport(n, writer)
	case *ast.V2PluginImport:
		return jc.writeV2PluginImport(n, writer)
	case *ast.V2StaticImport:
		return jc.writeV2StaticImport(n, writer)

	default:
		return fmt.Errorf("unexpected node type %T when serializing", node)
	}
}

func (jc *jsonCoder) writeFeature(node *ast.Feature, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Feature", writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeDynamicValue(node.Value, writer); err != nil {
		return err
	}
	// ValueRange
	if _, err := fmt.Fprint(writer, `,"valuerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ValueRange, writer); err != nil {
		return err
	}
	// ValueType
	if _, err := fmt.Fprint(writer, `,"valuetype":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.ValueType, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeFile(node *ast.File, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("File", writer); err != nil {
		return err
	}
	// Globals
	if _, err := fmt.Fprint(writer, `"globals":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Global](node.Globals, jc, writer); err != nil {
		return err
	}
	// Imports
	if _, err := fmt.Fprint(writer, `,"imports":`); err != nil {
		return err
	}
	if err := writeStringMap[ast.Import](node.Imports, jc, writer); err != nil {
		return err
	}
	// Mocks
	if _, err := fmt.Fprint(writer, `,"mocks":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Mock](node.Mocks, jc, writer); err != nil {
		return err
	}
	// Params
	if _, err := fmt.Fprint(writer, `,"params":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Parameter](node.Params, jc, writer); err != nil {
		return err
	}
	// Policies
	if _, err := fmt.Fprint(writer, `,"policies":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Policy](node.Policies, jc, writer); err != nil {
		return err
	}
	// SentinelOptions
	if _, err := fmt.Fprint(writer, `,"sentineloptions":`); err != nil {
		return err
	}
	if err := jc.write(node.SentinelOptions, writer); err != nil {
		return err
	}
	// Test
	if _, err := fmt.Fprint(writer, `,"test":`); err != nil {
		return err
	}
	if err := jc.write(node.Test, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeGlobal(node *ast.Global, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Global", writer); err != nil {
		return err
	}
	// GlobalRange
	if _, err := fmt.Fprint(writer, `"globalrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.GlobalRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeDynamicValue(node.Value, writer); err != nil {
		return err
	}
	// ValueRange
	if _, err := fmt.Fprint(writer, `,"valuerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ValueRange, writer); err != nil {
		return err
	}
	// ValueType
	if _, err := fmt.Fprint(writer, `,"valuetype":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.ValueType, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeMock(node *ast.Mock, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Mock", writer); err != nil {
		return err
	}
	// Data
	if _, err := fmt.Fprint(writer, `"data":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Parameter](node.Data, jc, writer); err != nil {
		return err
	}
	// DataRange
	if _, err := fmt.Fprint(writer, `,"datarange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.DataRange, writer); err != nil {
		return err
	}
	// MockRange
	if _, err := fmt.Fprint(writer, `,"mockrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.MockRange, writer); err != nil {
		return err
	}
	// Module
	if _, err := fmt.Fprint(writer, `,"module":`); err != nil {
		return err
	}
	if err := jc.write(node.Module, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeMockModule(node *ast.MockModule, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("MockModule", writer); err != nil {
		return err
	}
	// MockModuleRange
	if _, err := fmt.Fprint(writer, `"mockmodulerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.MockModuleRange, writer); err != nil {
		return err
	}
	// Source
	if _, err := fmt.Fprint(writer, `,"source":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Source, writer); err != nil {
		return err
	}
	// SourceRange
	if _, err := fmt.Fprint(writer, `,"sourcerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SourceRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeParameter(node *ast.Parameter, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Parameter", writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// ParameterRange
	if _, err := fmt.Fprint(writer, `,"parameterrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ParameterRange, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeDynamicValue(node.Value, writer); err != nil {
		return err
	}
	// ValueRange
	if _, err := fmt.Fprint(writer, `,"valuerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ValueRange, writer); err != nil {
		return err
	}
	// ValueType
	if _, err := fmt.Fprint(writer, `,"valuetype":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.ValueType, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writePolicy(node *ast.Policy, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Policy", writer); err != nil {
		return err
	}
	// EnforcementLevel
	if _, err := fmt.Fprint(writer, `"enforcementlevel":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.EnforcementLevel, writer); err != nil {
		return err
	}
	// EnforcementLevelRange
	if _, err := fmt.Fprint(writer, `,"enforcementlevelrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.EnforcementLevelRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Params
	if _, err := fmt.Fprint(writer, `,"params":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Parameter](node.Params, jc, writer); err != nil {
		return err
	}
	// ParamsRange
	if _, err := fmt.Fprint(writer, `,"paramsrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ParamsRange, writer); err != nil {
		return err
	}
	// PolicyRange
	if _, err := fmt.Fprint(writer, `,"policyrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.PolicyRange, writer); err != nil {
		return err
	}
	// Source
	if _, err := fmt.Fprint(writer, `,"source":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Source, writer); err != nil {
		return err
	}
	// SourceRange
	if _, err := fmt.Fprint(writer, `,"sourcerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SourceRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeSentinelOptions(node *ast.SentinelOptions, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("SentinelOptions", writer); err != nil {
		return err
	}
	// Features
	if _, err := fmt.Fprint(writer, `"features":`); err != nil {
		return err
	}
	if err := writeList[*ast.Feature](node.Features, jc, writer); err != nil {
		return err
	}
	// FeaturesRange
	if _, err := fmt.Fprint(writer, `,"featuresrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.FeaturesRange, writer); err != nil {
		return err
	}
	// SentinelOptionsRange
	if _, err := fmt.Fprint(writer, `,"sentineloptionsrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SentinelOptionsRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeTest(node *ast.Test, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Test", writer); err != nil {
		return err
	}
	// Rules
	if _, err := fmt.Fprint(writer, `"rules":`); err != nil {
		return err
	}
	if err := writeList[*ast.TestRule](node.Rules, jc, writer); err != nil {
		return err
	}
	// RulesRange
	if _, err := fmt.Fprint(writer, `,"rulesrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RulesRange, writer); err != nil {
		return err
	}
	// TestRange
	if _, err := fmt.Fprint(writer, `,"testrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.TestRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeTestRule(node *ast.TestRule, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("TestRule", writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// TestRuleRange
	if _, err := fmt.Fprint(writer, `,"testrulerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.TestRuleRange, writer); err != nil {
		return err
	}
	// ValueRange
	if _, err := fmt.Fprint(writer, `,"valuerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ValueRange, writer); err != nil {
		return err
	}
	// ValueType
	if _, err := fmt.Fprint(writer, `,"valuetype":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.ValueType, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeV1ModuleImport(node *ast.V1ModuleImport, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("V1ModuleImport", writer); err != nil {
		return err
	}
	// BlockRange
	if _, err := fmt.Fprint(writer, `"blockrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.BlockRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Source
	if _, err := fmt.Fprint(writer, `,"source":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Source, writer); err != nil {
		return err
	}
	// SourceRange
	if _, err := fmt.Fprint(writer, `,"sourcerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SourceRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeV1PluginImport(node *ast.V1PluginImport, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("V1PluginImport", writer); err != nil {
		return err
	}
	// Args
	if _, err := fmt.Fprint(writer, `"args":`); err != nil {
		return err
	}
	if err := jc.writeLiteralStringList(node.Args, writer); err != nil {
		return err
	}
	// ArgsRange
	if _, err := fmt.Fprint(writer, `,"argsrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ArgsRange, writer); err != nil {
		return err
	}
	// BlockRange
	if _, err := fmt.Fprint(writer, `,"blockrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.BlockRange, writer); err != nil {
		return err
	}
	// Config
	if _, err := fmt.Fprint(writer, `,"config":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Parameter](node.Config, jc, writer); err != nil {
		return err
	}
	// ConfigRange
	if _, err := fmt.Fprint(writer, `,"configrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ConfigRange, writer); err != nil {
		return err
	}
	// Env
	if _, err := fmt.Fprint(writer, `,"env":`); err != nil {
		return err
	}
	if err := jc.writeLiteralStringList(node.Env, writer); err != nil {
		return err
	}
	// EnvRange
	if _, err := fmt.Fprint(writer, `,"envrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.EnvRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Path
	if _, err := fmt.Fprint(writer, `,"path":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Path, writer); err != nil {
		return err
	}
	// PathRange
	if _, err := fmt.Fprint(writer, `,"pathrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.PathRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeV2ModuleImport(node *ast.V2ModuleImport, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("V2ModuleImport", writer); err != nil {
		return err
	}
	// BlockRange
	if _, err := fmt.Fprint(writer, `"blockrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.BlockRange, writer); err != nil {
		return err
	}
	// Kind
	if _, err := fmt.Fprint(writer, `,"kind":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Kind, writer); err != nil {
		return err
	}
	// KindRange
	if _, err := fmt.Fprint(writer, `,"kindrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.KindRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Source
	if _, err := fmt.Fprint(writer, `,"source":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Source, writer); err != nil {
		return err
	}
	// SourceRange
	if _, err := fmt.Fprint(writer, `,"sourcerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SourceRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeV2PluginImport(node *ast.V2PluginImport, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("V2PluginImport", writer); err != nil {
		return err
	}
	// Args
	if _, err := fmt.Fprint(writer, `"args":`); err != nil {
		return err
	}
	if err := jc.writeLiteralStringList(node.Args, writer); err != nil {
		return err
	}
	// ArgsRange
	if _, err := fmt.Fprint(writer, `,"argsrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ArgsRange, writer); err != nil {
		return err
	}
	// BlockRange
	if _, err := fmt.Fprint(writer, `,"blockrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.BlockRange, writer); err != nil {
		return err
	}
	// Config
	if _, err := fmt.Fprint(writer, `,"config":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Parameter](node.Config, jc, writer); err != nil {
		return err
	}
	// ConfigRange
	if _, err := fmt.Fprint(writer, `,"configrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ConfigRange, writer); err != nil {
		return err
	}
	// Env
	if _, err := fmt.Fprint(writer, `,"env":`); err != nil {
		return err
	}
	if err := writeStringMap[*ast.Parameter](node.Env, jc, writer); err != nil {
		return err
	}
	// EnvRange
	if _, err := fmt.Fprint(writer, `,"envrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.EnvRange, writer); err != nil {
		return err
	}
	// Kind
	if _, err := fmt.Fprint(writer, `,"kind":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Kind, writer); err != nil {
		return err
	}
	// KindRange
	if _, err := fmt.Fprint(writer, `,"kindrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.KindRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Source
	if _, err := fmt.Fprint(writer, `,"source":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Source, writer); err != nil {
		return err
	}
	// SourceRange
	if _, err := fmt.Fprint(writer, `,"sourcerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SourceRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeV2StaticImport(node *ast.V2StaticImport, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("V2StaticImport", writer); err != nil {
		return err
	}
	// BlockRange
	if _, err := fmt.Fprint(writer, `"blockrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.BlockRange, writer); err != nil {
		return err
	}
	// Format
	if _, err := fmt.Fprint(writer, `,"format":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Format, writer); err != nil {
		return err
	}
	// FormatRange
	if _, err := fmt.Fprint(writer, `,"formatrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.FormatRange, writer); err != nil {
		return err
	}
	// Kind
	if _, err := fmt.Fprint(writer, `,"kind":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Kind, writer); err != nil {
		return err
	}
	// KindRange
	if _, err := fmt.Fprint(writer, `,"kindrange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.KindRange, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NameRange
	if _, err := fmt.Fprint(writer, `,"namerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NameRange, writer); err != nil {
		return err
	}
	// Source
	if _, err := fmt.Fprint(writer, `,"source":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Source, writer); err != nil {
		return err
	}
	// SourceRange
	if _, err := fmt.Fprint(writer, `,"sourcerange":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.SourceRange, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}
