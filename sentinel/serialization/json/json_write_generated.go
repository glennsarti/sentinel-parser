package json

// Autogenerated using generate_sentinel_json.js
// DO NOT MODIFY MANUALLY
//
// This is not most effecient or quickest way to serialize to JSON, but it works!

import (
	"fmt"
	"io"

	"github.com/glennsarti/sentinel-parser/sentinel/ast"
)

func (jc *jsonCoder) write(node ast.Node, writer io.Writer) error {
	if node == nil {
		return fmt.Errorf("received nil while serializing")
	}

	switch n := node.(type) {
	case *ast.AssignStatement:
		return jc.writeAssignStatement(n, writer)
	case *ast.BadExpression:
		return jc.writeBadExpression(n, writer)
	case *ast.BadStatement:
		return jc.writeBadStatement(n, writer)
	case *ast.BasicLit:
		return jc.writeBasicLit(n, writer)
	case *ast.BinaryExpression:
		return jc.writeBinaryExpression(n, writer)
	case *ast.BlockStatement:
		return jc.writeBlockStatement(n, writer)
	case *ast.BranchStatement:
		return jc.writeBranchStatement(n, writer)
	case *ast.CallExpression:
		return jc.writeCallExpression(n, writer)
	case *ast.CaseWhenClause:
		return jc.writeCaseWhenClause(n, writer)
	case *ast.CaseStatement:
		return jc.writeCaseStatement(n, writer)
	case *ast.Comment:
		return jc.writeComment(n, writer)
	case *ast.Comments:
		return jc.writeComments(n, writer)
	case *ast.EmptyStatement:
		return jc.writeEmptyStatement(n, writer)
	case *ast.ExpressionStatement:
		return jc.writeExpressionStatement(n, writer)
	case *ast.FieldList:
		return jc.writeFieldList(n, writer)
	case *ast.File:
		return jc.writeFile(n, writer)
	case *ast.FuncDecl:
		return jc.writeFuncDecl(n, writer)
	case *ast.FuncLit:
		return jc.writeFuncLit(n, writer)
	case *ast.Ident:
		return jc.writeIdent(n, writer)
	case *ast.IfStatement:
		return jc.writeIfStatement(n, writer)
	case *ast.ImportDecl:
		return jc.writeImportDecl(n, writer)
	case *ast.IndexExpression:
		return jc.writeIndexExpression(n, writer)
	case *ast.ForStatement:
		return jc.writeForStatement(n, writer)
	case *ast.GroupExpression:
		return jc.writeGroupExpression(n, writer)
	case *ast.KeyedElementExpression:
		return jc.writeKeyedElementExpression(n, writer)
	case *ast.ListLit:
		return jc.writeListLit(n, writer)
	case *ast.MapLit:
		return jc.writeMapLit(n, writer)
	case *ast.ParamDecl:
		return jc.writeParamDecl(n, writer)
	case *ast.QuantExpression:
		return jc.writeQuantExpression(n, writer)
	case *ast.ReturnStatement:
		return jc.writeReturnStatement(n, writer)
	case *ast.RuleExpression:
		return jc.writeRuleExpression(n, writer)
	case *ast.SelectorExpression:
		return jc.writeSelectorExpression(n, writer)
	case *ast.SliceExpression:
		return jc.writeSliceExpression(n, writer)
	case *ast.UnaryExpression:
		return jc.writeUnaryExpression(n, writer)

	default:
		return fmt.Errorf("unexpected node type %T when serializing", node)
	}
}

func (jc *jsonCoder) writeAssignStatement(node *ast.AssignStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("AssignStatement", writer); err != nil {
		return err
	}
	// AssignOp
	if _, err := fmt.Fprint(writer, `"assignop":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.AssignOp), writer); err != nil {
		return err
	}
	// AssignOpPos
	if _, err := fmt.Fprint(writer, `,"assignoppos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.AssignOpPos, writer); err != nil {
		return err
	}
	// LhsExpr
	if _, err := fmt.Fprint(writer, `,"lhsexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.LhsExpr, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RhsExpr
	if _, err := fmt.Fprint(writer, `,"rhsexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.RhsExpr, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeBadExpression(node *ast.BadExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("BadExpression", writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeBadStatement(node *ast.BadStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("BadStatement", writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeBasicLit(node *ast.BasicLit, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("BasicLit", writer); err != nil {
		return err
	}
	// Kind
	if _, err := fmt.Fprint(writer, `"kind":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.Kind), writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeBinaryExpression(node *ast.BinaryExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("BinaryExpression", writer); err != nil {
		return err
	}
	// LeftExpr
	if _, err := fmt.Fprint(writer, `"leftexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.LeftExpr, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Op
	if _, err := fmt.Fprint(writer, `,"op":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.Op), writer); err != nil {
		return err
	}
	// OpPos
	if _, err := fmt.Fprint(writer, `,"oppos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.OpPos, writer); err != nil {
		return err
	}
	// RightExpr
	if _, err := fmt.Fprint(writer, `,"rightexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.RightExpr, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeBlockStatement(node *ast.BlockStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("BlockStatement", writer); err != nil {
		return err
	}
	// LeftBrace
	if _, err := fmt.Fprint(writer, `"leftbrace":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBrace, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightBrace
	if _, err := fmt.Fprint(writer, `,"rightbrace":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBrace, writer); err != nil {
		return err
	}
	// Statments
	if _, err := fmt.Fprint(writer, `,"statments":`); err != nil {
		return err
	}
	if err := writeList(node.Statments, jc, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeBranchStatement(node *ast.BranchStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("BranchStatement", writer); err != nil {
		return err
	}
	// Kind
	if _, err := fmt.Fprint(writer, `"kind":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.Kind), writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeCallExpression(node *ast.CallExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("CallExpression", writer); err != nil {
		return err
	}
	// Args
	if _, err := fmt.Fprint(writer, `"args":`); err != nil {
		return err
	}
	if err := writeList(node.Args, jc, writer); err != nil {
		return err
	}
	// Callee
	if _, err := fmt.Fprint(writer, `,"callee":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Callee, writer); err != nil {
		return err
	}
	// LeftParen
	if _, err := fmt.Fprint(writer, `,"leftparen":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftParen, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightParen
	if _, err := fmt.Fprint(writer, `,"rightparen":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightParen, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeCaseWhenClause(node *ast.CaseWhenClause, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("CaseWhenClause", writer); err != nil {
		return err
	}
	// ColonPos
	if _, err := fmt.Fprint(writer, `"colonpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ColonPos, writer); err != nil {
		return err
	}
	// Conditions
	if _, err := fmt.Fprint(writer, `,"conditions":`); err != nil {
		return err
	}
	if err := writeList(node.Conditions, jc, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Statements
	if _, err := fmt.Fprint(writer, `,"statements":`); err != nil {
		return err
	}
	if err := writeList(node.Statements, jc, writer); err != nil {
		return err
	}
	// TokenKind
	if _, err := fmt.Fprint(writer, `,"tokenkind":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.TokenKind), writer); err != nil {
		return err
	}
	// TokenPos
	if _, err := fmt.Fprint(writer, `,"tokenpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.TokenPos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeCaseStatement(node *ast.CaseStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("CaseStatement", writer); err != nil {
		return err
	}
	// CasePos
	if _, err := fmt.Fprint(writer, `"casepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.CasePos, writer); err != nil {
		return err
	}
	// Clauses
	if _, err := fmt.Fprint(writer, `,"clauses":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Clauses, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeComment(node *ast.Comment, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Comment", writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Prefix
	if _, err := fmt.Fprint(writer, `,"prefix":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Prefix, writer); err != nil {
		return err
	}
	// PrefixPos
	if _, err := fmt.Fprint(writer, `,"prefixpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.PrefixPos, writer); err != nil {
		return err
	}
	// Text
	if _, err := fmt.Fprint(writer, `,"text":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Text, writer); err != nil {
		return err
	}
	// TextPos
	if _, err := fmt.Fprint(writer, `,"textpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.TextPos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeComments(node *ast.Comments, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Comments", writer); err != nil {
		return err
	}
	// List
	if _, err := fmt.Fprint(writer, `"list":`); err != nil {
		return err
	}
	if err := writeList(node.List, jc, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeEmptyStatement(node *ast.EmptyStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("EmptyStatement", writer); err != nil {
		return err
	}
	// Implied
	if _, err := fmt.Fprint(writer, `"implied":`); err != nil {
		return err
	}
	if err := jc.writeLiteralBool(node.Implied, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeExpressionStatement(node *ast.ExpressionStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("ExpressionStatement", writer); err != nil {
		return err
	}
	// Expr
	if _, err := fmt.Fprint(writer, `"expr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Expr, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeFieldList(node *ast.FieldList, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("FieldList", writer); err != nil {
		return err
	}
	// Fields
	if _, err := fmt.Fprint(writer, `"fields":`); err != nil {
		return err
	}
	if err := writeList(node.Fields, jc, writer); err != nil {
		return err
	}
	// LeftParen
	if _, err := fmt.Fprint(writer, `,"leftparen":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftParen, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightParen
	if _, err := fmt.Fprint(writer, `,"rightparen":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightParen, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeFile(node *ast.File, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("File", writer); err != nil {
		return err
	}
	// Doc
	if _, err := fmt.Fprint(writer, `"doc":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Doc, writer); err != nil {
		return err
	}
	// Imports
	if _, err := fmt.Fprint(writer, `,"imports":`); err != nil {
		return err
	}
	if err := writeList(node.Imports, jc, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Params
	if _, err := fmt.Fprint(writer, `,"params":`); err != nil {
		return err
	}
	if err := writeList(node.Params, jc, writer); err != nil {
		return err
	}
	// Statements
	if _, err := fmt.Fprint(writer, `,"statements":`); err != nil {
		return err
	}
	if err := writeList(node.Statements, jc, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeFuncDecl(node *ast.FuncDecl, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("FuncDecl", writer); err != nil {
		return err
	}
	// Body
	if _, err := fmt.Fprint(writer, `"body":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Body, writer); err != nil {
		return err
	}
	// Doc
	if _, err := fmt.Fprint(writer, `,"doc":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Doc, writer); err != nil {
		return err
	}
	// FuncPos
	if _, err := fmt.Fprint(writer, `,"funcpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.FuncPos, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Name, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Params
	if _, err := fmt.Fprint(writer, `,"params":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Params, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeFuncLit(node *ast.FuncLit, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("FuncLit", writer); err != nil {
		return err
	}
	// Body
	if _, err := fmt.Fprint(writer, `"body":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Body, writer); err != nil {
		return err
	}
	// FuncPos
	if _, err := fmt.Fprint(writer, `,"funcpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.FuncPos, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Params
	if _, err := fmt.Fprint(writer, `,"params":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Params, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeIdent(node *ast.Ident, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("Ident", writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `"name":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(node.Name, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeIfStatement(node *ast.IfStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("IfStatement", writer); err != nil {
		return err
	}
	// Condition
	if _, err := fmt.Fprint(writer, `"condition":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Condition, writer); err != nil {
		return err
	}
	// ElsePos
	if _, err := fmt.Fprint(writer, `,"elsepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ElsePos, writer); err != nil {
		return err
	}
	// FalseBlock
	if _, err := fmt.Fprint(writer, `,"falseblock":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.FalseBlock, writer); err != nil {
		return err
	}
	// IfPos
	if _, err := fmt.Fprint(writer, `,"ifpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.IfPos, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// TrueBlock
	if _, err := fmt.Fprint(writer, `,"trueblock":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.TrueBlock, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeImportDecl(node *ast.ImportDecl, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("ImportDecl", writer); err != nil {
		return err
	}
	// Alias
	if _, err := fmt.Fprint(writer, `"alias":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Alias, writer); err != nil {
		return err
	}
	// AsPos
	if _, err := fmt.Fprint(writer, `,"aspos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.AsPos, writer); err != nil {
		return err
	}
	// Doc
	if _, err := fmt.Fprint(writer, `,"doc":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Doc, writer); err != nil {
		return err
	}
	// ImportPos
	if _, err := fmt.Fprint(writer, `,"importpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ImportPos, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Name, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeIndexExpression(node *ast.IndexExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("IndexExpression", writer); err != nil {
		return err
	}
	// Index
	if _, err := fmt.Fprint(writer, `"index":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Index, writer); err != nil {
		return err
	}
	// LeftBrack
	if _, err := fmt.Fprint(writer, `,"leftbrack":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBrack, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightBrack
	if _, err := fmt.Fprint(writer, `,"rightbrack":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBrack, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeForStatement(node *ast.ForStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("ForStatement", writer); err != nil {
		return err
	}
	// AsPos
	if _, err := fmt.Fprint(writer, `"aspos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.AsPos, writer); err != nil {
		return err
	}
	// Block
	if _, err := fmt.Fprint(writer, `,"block":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Block, writer); err != nil {
		return err
	}
	// ForPos
	if _, err := fmt.Fprint(writer, `,"forpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ForPos, writer); err != nil {
		return err
	}
	// Iterable
	if _, err := fmt.Fprint(writer, `,"iterable":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Iterable, writer); err != nil {
		return err
	}
	// Iterator1
	if _, err := fmt.Fprint(writer, `,"iterator1":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Iterator1, writer); err != nil {
		return err
	}
	// Iterator2
	if _, err := fmt.Fprint(writer, `,"iterator2":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Iterator2, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeGroupExpression(node *ast.GroupExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("GroupExpression", writer); err != nil {
		return err
	}
	// LeftParen
	if _, err := fmt.Fprint(writer, `"leftparen":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftParen, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightParen
	if _, err := fmt.Fprint(writer, `,"rightparen":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightParen, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeKeyedElementExpression(node *ast.KeyedElementExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("KeyedElementExpression", writer); err != nil {
		return err
	}
	// ColonPos
	if _, err := fmt.Fprint(writer, `"colonpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ColonPos, writer); err != nil {
		return err
	}
	// Key
	if _, err := fmt.Fprint(writer, `,"key":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Key, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeListLit(node *ast.ListLit, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("ListLit", writer); err != nil {
		return err
	}
	// Items
	if _, err := fmt.Fprint(writer, `"items":`); err != nil {
		return err
	}
	if err := writeList(node.Items, jc, writer); err != nil {
		return err
	}
	// LeftBrack
	if _, err := fmt.Fprint(writer, `,"leftbrack":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBrack, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightBrack
	if _, err := fmt.Fprint(writer, `,"rightbrack":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBrack, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeMapLit(node *ast.MapLit, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("MapLit", writer); err != nil {
		return err
	}
	// Elements
	if _, err := fmt.Fprint(writer, `"elements":`); err != nil {
		return err
	}
	if err := writeList(node.Elements, jc, writer); err != nil {
		return err
	}
	// LeftBrace
	if _, err := fmt.Fprint(writer, `,"leftbrace":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBrace, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightBrace
	if _, err := fmt.Fprint(writer, `,"rightbrace":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBrace, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeParamDecl(node *ast.ParamDecl, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("ParamDecl", writer); err != nil {
		return err
	}
	// Default
	if _, err := fmt.Fprint(writer, `"default":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Default, writer); err != nil {
		return err
	}
	// DefaultPos
	if _, err := fmt.Fprint(writer, `,"defaultpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.DefaultPos, writer); err != nil {
		return err
	}
	// Doc
	if _, err := fmt.Fprint(writer, `,"doc":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Doc, writer); err != nil {
		return err
	}
	// Name
	if _, err := fmt.Fprint(writer, `,"name":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Name, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeQuantExpression(node *ast.QuantExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("QuantExpression", writer); err != nil {
		return err
	}
	// AsPos
	if _, err := fmt.Fprint(writer, `"aspos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.AsPos, writer); err != nil {
		return err
	}
	// CommaPos
	if _, err := fmt.Fprint(writer, `,"commapos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRangePointer(node.CommaPos, writer); err != nil {
		return err
	}
	// LeftBrace
	if _, err := fmt.Fprint(writer, `,"leftbrace":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBrace, writer); err != nil {
		return err
	}
	// Name1
	if _, err := fmt.Fprint(writer, `,"name1":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Name1, writer); err != nil {
		return err
	}
	// Name2
	if _, err := fmt.Fprint(writer, `,"name2":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Name2, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Op
	if _, err := fmt.Fprint(writer, `,"op":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.Op), writer); err != nil {
		return err
	}
	// OpPos
	if _, err := fmt.Fprint(writer, `,"oppos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.OpPos, writer); err != nil {
		return err
	}
	// Quantifier
	if _, err := fmt.Fprint(writer, `,"quantifier":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Quantifier, writer); err != nil {
		return err
	}
	// RightBrace
	if _, err := fmt.Fprint(writer, `,"rightbrace":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBrace, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeReturnStatement(node *ast.ReturnStatement, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("ReturnStatement", writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Result
	if _, err := fmt.Fprint(writer, `,"result":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Result, writer); err != nil {
		return err
	}
	// ReturnPos
	if _, err := fmt.Fprint(writer, `,"returnpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.ReturnPos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeRuleExpression(node *ast.RuleExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("RuleExpression", writer); err != nil {
		return err
	}
	// Doc
	if _, err := fmt.Fprint(writer, `"doc":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Doc, writer); err != nil {
		return err
	}
	// LeftBracePos
	if _, err := fmt.Fprint(writer, `,"leftbracepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBracePos, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightBracePos
	if _, err := fmt.Fprint(writer, `,"rightbracepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBracePos, writer); err != nil {
		return err
	}
	// RuleTokenPos
	if _, err := fmt.Fprint(writer, `,"ruletokenpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RuleTokenPos, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	// When
	if _, err := fmt.Fprint(writer, `,"when":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.When, writer); err != nil {
		return err
	}
	// WhenTokenPos
	if _, err := fmt.Fprint(writer, `,"whentokenpos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRangePointer(node.WhenTokenPos, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeSelectorExpression(node *ast.SelectorExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("SelectorExpression", writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Selector
	if _, err := fmt.Fprint(writer, `,"selector":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Selector, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeSliceExpression(node *ast.SliceExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("SliceExpression", writer); err != nil {
		return err
	}
	// Colon
	if _, err := fmt.Fprint(writer, `"colon":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.Colon, writer); err != nil {
		return err
	}
	// HighExpr
	if _, err := fmt.Fprint(writer, `,"highexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.HighExpr, writer); err != nil {
		return err
	}
	// LeftBrack
	if _, err := fmt.Fprint(writer, `,"leftbrack":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.LeftBrack, writer); err != nil {
		return err
	}
	// LowExpr
	if _, err := fmt.Fprint(writer, `,"lowexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.LowExpr, writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `,"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// RightBrack
	if _, err := fmt.Fprint(writer, `,"rightbrack":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.RightBrack, writer); err != nil {
		return err
	}
	// Value
	if _, err := fmt.Fprint(writer, `,"value":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.Value, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}

func (jc *jsonCoder) writeUnaryExpression(node *ast.UnaryExpression, writer io.Writer) error {
	if node == nil {
		_, err := fmt.Fprintf(writer, "null")
		return err
	}
	if err := jc.writeHeader("UnaryExpression", writer); err != nil {
		return err
	}
	// NodePos
	if _, err := fmt.Fprint(writer, `"nodepos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.NodePos, writer); err != nil {
		return err
	}
	// Op
	if _, err := fmt.Fprint(writer, `,"op":`); err != nil {
		return err
	}
	if err := jc.writeLiteralString(string(node.Op), writer); err != nil {
		return err
	}
	// OpPos
	if _, err := fmt.Fprint(writer, `,"oppos":`); err != nil {
		return err
	}
	if err := jc.writeSourceRange(node.OpPos, writer); err != nil {
		return err
	}
	// RhsExpr
	if _, err := fmt.Fprint(writer, `,"rhsexpr":`); err != nil {
		return err
	}
	if err := jc.writeNilableNode(node.RhsExpr, writer); err != nil {
		return err
	}
	return jc.writeFooter(writer)
}
